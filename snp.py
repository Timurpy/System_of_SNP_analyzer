# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:/Users/Arekusei/Documents/qt/snp.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QWidget, QLabel, QComboBox, QApplication)
from PyQt5 import QtGui, QtWidgets, QtCore
import pandas as pd
from load_data import get_aggregated_patient_data_from_excel
from parse_data import get_MAF_info_from_dbSNP
import sys

class ParsingThread(QtCore.QThread):
    mysignal = QtCore.pyqtSignal(list)
    
    def  __init__(self, 
                  patient_snp_list=None, 
                  snp_info_dictionary=None,
                  ):
        super().__init__()
        self.patient_snp_list = patient_snp_list
        self.snp_info_dictionary = snp_info_dictionary
        
    def run(self):
        for num, rs_id in enumerate(self.patient_snp_list):
            
            if rs_id in self.snp_info_dictionary.keys():
                allele_data = self.snp_info_dictionary[rs_id]
            else:
                allele_data = get_MAF_info_from_dbSNP(rs_id)
                self.snp_info_dictionary[rs_id] = allele_data
            self.mysignal.emit([num, rs_id, allele_data, self.snp_info_dictionary])
            
class ComboBoxWithBlock(QComboBox):
    
    def __init__(self, parent):
        QComboBox.__init__(self, parent)
        self.readonly = False
        
    def setReadonly(self, value):
        self.readonly = value

    def mousePressEvent(self, event):
        if not self.readonly:
            QComboBox.mousePressEvent(self, event)

    def keyPressEvent(self, event):
        if not self.readonly:
            QComboBox.keyPressEvent(self, event)

    def wheelEvent(self, event):
        if not self.readonly:
            QComboBox.wheelEvent(self, event)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        df, unique_patients = get_aggregated_patient_data_from_excel(config_path="config.yaml")
        self.df = df
        self.unique_patients = sorted(unique_patients, key=lambda x: int(x.split('_')[-1]))
        self.snp_info_dictionary = {}

        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedWidth(1280)
        MainWindow.setFixedHeight(760)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        
        self.label_depth = QtWidgets.QLabel(self.centralwidget)
        self.label_depth.setGeometry(QtCore.QRect(900, 58, 150, 20))
        self.label_depth.setObjectName("label_maf")

        self.lineEdit_depth = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_depth.setGeometry(QtCore.QRect(1060, 55, 50, 31))
        self.lineEdit_depth.setObjectName("lineEdit_maf")


        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(550, 200, 200, 60))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.onActivated)

        self.label_maf = QtWidgets.QLabel(self.centralwidget)
        self.label_maf.setGeometry(QtCore.QRect(910, 130, 120, 20))
        self.label_maf.setObjectName("label_maf")

        self.lineEdit_maf = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_maf.setGeometry(QtCore.QRect(1040, 125, 50, 31))
        self.lineEdit_maf.setObjectName("lineEdit_maf")

        self.pushButton_maf = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_maf.setGeometry(QtCore.QRect(900, 200, 200, 61))
        self.pushButton_maf.setObjectName("pushButton_maf")
        self.pushButton_maf.clicked.connect(self.filter_info)
        self.pushButton_maf.setEnabled(False)

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(150, 260, 981, 411))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.list_0 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.list_0.setObjectName("list_0")

        self.verticalLayout.addWidget(self.list_0)
        self.textEdit = QtWidgets.QTextEdit(self.verticalLayoutWidget)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout.addWidget(self.textEdit)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1113, 26))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.label_select_patient = QLabel(self.centralwidget)
        self.label_select_patient.setGeometry(202, 130, 500, 20)
        self.label_select_patient.setText(f"Выберите пациента для анализа")

        self.combo = ComboBoxWithBlock(self.centralwidget)
        self.combo.addItems(self.unique_patients)
        self.combo.move(200, 155)
        self.combo.resize(200, 25)
        # self.combo.activated[str].connect(self.onPatientSelected)

        self.request_status = QLabel(self.centralwidget)
        self.request_status.setGeometry(540, 130, 500, 20)
        self.request_status.setText(f"{' '*3}Приветствуем вас в SNP Analyzer!")
        self.request_status.setVisible(True)
        
        self.progress = QtWidgets.QProgressBar(self.centralwidget)
        self.progress.setGeometry(180, 220, 280, 20)
        self.progress.setVisible(False)
        
    

    def filter_info(self):
        print()
       
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SNP Analyzer"))
        self.pushButton.setText(_translate("MainWindow", "Начать поиск"))
        self.pushButton_maf.setText(_translate("MainWindow", "Фильтровать"))
        self.lineEdit_maf.setText(_translate("MainWindow", "0.3"))
        self.lineEdit_depth.setText(_translate("MainWindow", "10"))
        self.list_0.setText(' ')
        self.label_maf.setText('Задайте порог MAF')
        self.label_depth.setText('Задайте порог покрытия')

    def onActivated(self):
        patient_id = self.combo.currentText()
        self.combo.setReadonly(True)
        
        patient_info = self.df[patient_id]
        patient_snp_list = list(patient_info[patient_info>0].index)
        self.allele_data_list = []
        
        self.progress.setRange(0, len(patient_snp_list))
        self.progress.setValue(0)
        self.progress.setVisible(True)
        self.allele_data_list = []
        
        self.request_status.setVisible(True)
        self.request_status.setText(f"parsing info on {patient_snp_list[0]} from dbSNP")
        
        
        self.mythread = ParsingThread(patient_snp_list, self.snp_info_dictionary)    # Создаем экземпляр класса
        # self.mythread.started.connect(self.on_started)
        self.mythread.finished.connect(self.on_finished)
        self.mythread.mysignal.connect(self.on_change, QtCore.Qt.QueuedConnection)
        self.mythread.start() 
        
    def on_change(self, emmited_list):
        num, rs_id, allele_data, updated_info_dictionary = emmited_list
        self.progress.setValue(num+1)
        self.request_status.setText(f"parsing info on {rs_id} from dbSNP")
        self.request_status.adjustSize()
        if len(allele_data): 
            mafs = [float(entry.split('=')[-1].split()[0]) for entry in allele_data]
            mean_maf = round(sum(mafs)/len(mafs), 5)
            self.allele_data_list.append((rs_id, f"average MAF = {mean_maf} (from {len(mafs)} sources)"))
        self.snp_info_dictionary = updated_info_dictionary
        
    def on_finished(self):      # Вызывается при завершении потока
        
        data_to_print = [': '.join(snp_) for snp_ in self.allele_data_list]
        self.progress.setMaximum(1)
        self.progress.setValue(1)
        self.textEdit.setText('\n'.join(data_to_print))
        self.request_status.setText(f"{' '*20}completed")
        self.combo.setReadonly(False)
        # self.progress.setVisible(False)
        # self.request_status.setVisible(False)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
